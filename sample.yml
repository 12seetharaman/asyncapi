asyncapi: "0.1.0"
info:
  title: AsyncAPI Sample
  version: "1.0.0"
  protocols:
    - "#/components/protocols/mqtt"

topics:
  hitch.accounts.1.0.0.actions.signup:
    message:
      headers:
        qos:
          $ref: "#/components/definitions/MQTTQoSHeader"
        retainFlag:
          $ref: "#/components/definitions/MQTTRetainHeader"
      payload:
        contentType:
          $ref: "#/components/definitions/contentType"
        user:
          $ref: "#/components/definitions/userCreate"
        signup:
          $ref: "#/components/definitions/signup"
  hitch.accounts.1.0.0.events.signedup:
    message:
      headers:
        qos:
          $ref: "#/components/definitions/MQTTQoSHeader"
        retainFlag:
          $ref: "#/components/definitions/MQTTRetainHeader"
      payload:
        contentType:
          $ref: "#/components/definitions/contentType"
        user:
          $ref: "#/components/definitions/user"
        signup:
          $ref: "#/components/definitions/signup"

components:
  protocols:
    mqtt:
      name: MQTT
      topic:
        separator: /
        singleLevel: +
        multiLevel: "#"

  definitions:
    id:
      name: id
      description: Resource identifier
      type: string
    username:
      name: username
      description: User handle
      type: string
    datetime:
      name: datetime
      description: Date and Time of the message
      type: string
      format: date-time
    MQTTQoSHeader:
      name: qos
      description: Quality of Service
      type: integer
      format: int32
      default: 1
      enum:
        - 0
        - 2
    MQTTRetainHeader:
      name: retainFlag
      description:
        | This flag determines if the message will be saved by the broker for the specified
        | topic as last known good value. New clients that subscribe to that topic will receive
        | the last retained message on that topic instantly after subscribing. More on retained messages
        | and best practices in one of the next posts.
      type: boolean
      default: false
    contentType:
      name: contentType
      description: Message content type
      default: application/json
      type: string
      enum:
        - application/xml
    user:
      type: object
      required:
        - id
        - username
      properties:
        id:
          description: User Id
          $ref: "#/components/definitions/id"
        full_name:
          description: User full name
          type: string
        username:
          $ref: "#/components/definitions/username"
    userCreate:
      type: object
      required:
        - username
      properties:
        full_name:
          description: User full name
          type: string
        username:
          $ref: "#/components/definitions/username"
    signup:
      type: object
      required:
        - method
        - datetime
      properties:
        method:
          description: Signup method
          type: string
          enum:
            - email
            - facebook
            - twitter
            - github
            - google
        datetime:
          $ref: "#/components/definitions/datetime"

servers:
  - url: mqtt://localhost:{port}
    description: Development Broker instance
    templates:
      port:
        default: 1883
        enum:
          - 1883
          - 8883
